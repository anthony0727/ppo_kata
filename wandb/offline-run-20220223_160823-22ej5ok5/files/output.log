<Monitor<TimeLimit<CartPoleEnv<CartPole-v1>>>>
EnvSpec(CartPole-v1)
Box([-4.8000002e+00 -3.4028235e+38 -4.1887903e-01 -3.4028235e+38], [4.8000002e+00 3.4028235e+38 4.1887903e-01 3.4028235e+38], (4,), float32)
Discrete(2)
example transition
OrderedDict([('obs', array([ 2.0843086e+00, -2.9857364e+38,  1.0130514e-01, -2.3258200e+38],
      dtype=float32)), ('action', 1), ('reward', 0.0), ('done', False)])
buffer spec
[('obs', '<f4', (4,)), ('action', '<i8'), ('reward', '<f8'), ('done', 'u1'), ('value', '<f4'), ('log_prob', '<f4')]
Agent(
  (actor): Sequential(
    (0): Linear(in_features=4, out_features=256, bias=True)
    (1): Tanh()
    (2): Linear(in_features=256, out_features=256, bias=True)
    (3): Tanh()
    (4): Linear(in_features=256, out_features=2, bias=True)
    (5): Softmax(dim=-1)
  )
  (critic): Sequential(
    (0): Linear(in_features=4, out_features=256, bias=True)
    (1): Tanh()
    (2): Linear(in_features=256, out_features=256, bias=True)
    (3): Tanh()
    (4): Linear(in_features=256, out_features=1, bias=True)
  )
)
Python 3.7.11 (default, Sep 10 2021, 16:01:34)
Type 'copyright', 'credits' or 'license' for more information
IPython 7.27.0 -- An enhanced Interactive Python. Type '?' for help.
PyDev console: using IPython 7.27.0
Out[2]: Categorical(probs: torch.Size([32, 2]), logits: torch.Size([32, 2]))
Out[3]:
tensor([0.6894, 0.6888, 0.6915, 0.6900, 0.6903, 0.6895, 0.6891, 0.6895, 0.6899,
        0.6895, 0.6918, 0.6893, 0.6908, 0.6890, 0.6920, 0.6889, 0.6904, 0.6896,
        0.6891, 0.6899, 0.6880, 0.6908, 0.6900, 0.6881, 0.6917, 0.6904, 0.6913,
        0.6892, 0.6891, 0.6885, 0.6894, 0.6889], grad_fn=<NegBackward>)
Out[4]: Categorical(probs: torch.Size([32, 2]), logits: torch.Size([32, 2]))
Out[6]:
tensor([[0.4567, 0.5433],
        [0.4532, 0.5468],
        [0.4717, 0.5283],
        [0.4603, 0.5397],
        [0.4626, 0.5374],
        [0.4573, 0.5427],
        [0.4549, 0.5451],
        [0.4574, 0.5426],
        [0.4598, 0.5402],
        [0.4572, 0.5428],
        [0.4742, 0.5258],
        [0.4563, 0.5437],
        [0.4659, 0.5341],
        [0.4547, 0.5453],
        [0.4762, 0.5238],
        [0.4538, 0.5462],
        [0.4629, 0.5371],
        [0.4581, 0.5419],
        [0.4552, 0.5448],
        [0.4598, 0.5402],
        [0.4495, 0.5505],
        [0.4659, 0.5341],
        [0.4603, 0.5397],
        [0.4499, 0.5501],
        [0.4729, 0.5271],
        [0.4631, 0.5369],
        [0.4695, 0.5305],
        [0.4554, 0.5446],
        [0.4553, 0.5447],
        [0.4516, 0.5484],
        [0.4569, 0.5431],
        [0.4540, 0.5460]], grad_fn=<DivBackward0>)
Out[7]: Categorical(probs: torch.Size([32, 2]), logits: torch.Size([32, 2]))
Out[8]:
tensor([-0.6100, -0.7914, -0.7514, -0.7760, -0.6210, -0.6111, -0.6069, -0.7822,
        -0.7771, -0.6111,  0.0000, -0.7846, -0.6272, -0.6064, -0.6466, -0.7901,
        -0.6216, -0.7806, -0.6074, -0.6158,  0.0000, -0.7639, -0.6167, -0.5976,
         0.0000, -0.6219, -0.7561, -0.7867, -0.7869, -0.7949, -0.7832, -0.7897])
Out[9]: False
Out[10]:
tensor([1.0000, 1.2064, 1.0000, 1.0000, 0.8607, 1.0000, 1.0000, 1.0000, 1.0000,
        1.0000, 0.5258, 1.1916, 1.0000, 0.8339, 1.0000, 1.2036, 1.0000, 1.1828,
        0.8357, 1.0000, 0.4495, 1.1466, 1.0000, 0.8177, 0.4729, 0.8625, 1.0000,
        1.0000, 1.0000, 1.0000, 1.0000, 1.0000], grad_fn=<ExpBackward>)
Out[11]:
tensor([0.1746, 0.0695, 0.1989, 0.2058, 0.2054, 0.1744, 0.1623, 0.1358, 0.1935,
        0.2012, 0.1960, 0.1108, 0.1934, 0.0439, 0.2035, 0.0550, 0.1992, 0.1824,
        0.1108, 0.2090, 0.0517, 0.2050, 0.1829, 0.1729, 0.1768, 0.1831, 0.1984,
        0.1162, 0.1315, 0.1895, 0.1742, 0.2010], grad_fn=<SqueezeBackward0>)
Out[12]:
tensor([ 9.1995,  9.7715,  9.3173,  8.8335,  8.3185,  7.7707,  7.1884,  6.5691,
         5.9106,  5.2105,  4.4664,  3.6756,  2.8344,  1.9405,  1.0000,  9.5687,
        10.1670,  9.7389,  9.2828,  8.7971,  8.2814,  7.7339,  7.1530,  6.5364,
         5.8819,  5.1870,  4.4473,  3.6617,  2.8272,  1.9405,  1.0000,  7.3155,
         7.7689,  7.1871,  6.5682,  5.9099,  5.2101,  4.4663,  3.6758,  2.8349,
         1.9405,  1.0000, 13.5611, 14.4118, 14.2520, 14.0831, 13.9047, 13.7160,
        13.5145, 13.2991, 13.0690, 12.8234, 12.5616, 12.2839, 11.9878, 11.6725,
        11.3378, 10.9826, 10.6041, 10.2012,  9.7733,  9.3177,  8.8340,  8.3190,
         7.7711,  7.1885,  6.5691,  5.9108,  5.2113,  4.4671,  3.6763,  2.8351,
         1.9405,  1.0000,  9.5972, 10.1948,  9.7677,  9.3128,  8.8285,  8.3142,
         7.7667,  7.1851,  6.5676,  5.9102,  5.2107,  4.4667,  3.6756,  2.8347,
         1.9405,  1.0000, 11.5429, 12.2660, 11.9728, 11.6620, 11.3305, 10.9770,
        10.6001, 10.1984,  9.7706,  9.3164,  8.8327,  8.3179,  7.7703,  7.1880,
         6.5690,  5.9111,  5.2112,  4.4669,  3.6757,  2.8348,  1.9405,  1.0000,
         9.6215, 10.2221,  9.7964,  9.3448,  8.8636,  8.3530,  7.8112,  7.2362,
         6.6238,  5.9738,  5.2816,  4.5445,  3.7619,  2.9309,  2.0463,  1.1068])
Out[14]: tensor(0.6898, grad_fn=<MeanBackward0>)
Out[15]:
tensor([1.0000, 1.2064, 1.0000, 1.0000, 0.8607, 1.0000, 1.0000, 1.0000, 1.0000,
        1.0000, 0.5258, 1.1916, 1.0000, 0.8339, 1.0000, 1.2036, 1.0000, 1.1828,
        0.8357, 1.0000, 0.4495, 1.1466, 1.0000, 0.8177, 0.4729, 0.8625, 1.0000,
        1.0000, 1.0000, 1.0000, 1.0000, 1.0000], grad_fn=<ExpBackward>)
Out[16]:
tensor([1.0000, 1.1000, 1.0000, 1.0000, 0.9000, 1.0000, 1.0000, 1.0000, 1.0000,
        1.0000, 0.9000, 1.1000, 1.0000, 0.9000, 1.0000, 1.1000, 1.0000, 1.1000,
        0.9000, 1.0000, 0.9000, 1.1000, 1.0000, 0.9000, 0.9000, 0.9000, 1.0000,
        1.0000, 1.0000, 1.0000, 1.0000, 1.0000], grad_fn=<ClampBackward1>)
Out[17]:
tensor([ 0.5200, -1.0053, -1.5250,  0.1101, -0.2272,  0.5532, -0.0055,  1.3919,
         0.4106,  0.1113, -1.7332, -0.2098, -0.8142, -1.4814, -1.5262, -1.2356,
        -0.2255,  0.7973, -0.3678, -0.0543, -1.7332, -0.6085,  0.2691,  1.5380,
        -1.7332, -0.4059, -1.2738,  1.8575, -0.1911,  1.1162,  0.6386,  0.5458])
Out[18]:
tensor([ 0.5200, -1.2128, -1.5250,  0.1101, -0.2045,  0.5532, -0.0055,  1.3919,
         0.4106,  0.1113, -1.5599, -0.2500, -0.8142, -1.3333, -1.5262, -1.4872,
        -0.2255,  0.8770, -0.3310, -0.0543, -1.5599, -0.6977,  0.2691,  1.2576,
        -1.5599, -0.3653, -1.2738,  1.8575, -0.1911,  1.1162,  0.6386,  0.5458],
       grad_fn=<MinimumBackward>)
Out[19]: tensor(-3.1718, grad_fn=<SubBackward0>)
